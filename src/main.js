import { Telegraf, session, Markup } from 'telegraf';
import config from 'config';
import { message } from 'telegraf/filters';
import { ogg } from './ogg.js';
import { openai } from './openai.js';
import { code } from 'telegraf/format';

console.log(config.get('TEST_ENV'));

const INITIAL_SESSION = {
  messages: [],
};

const bot = new Telegraf(config.get('Telegram_token'));

bot.use(session());

bot.command('new', async (ctx) => {
  ctx.session = INITIAL_SESSION;
  await ctx.reply('üçÄ –î–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω üçÄ');
});

bot.command('start', async (ctx) => {
  const groupLink = 'https://t.me/BotOpenAo';
  const message = `üí°üí°üí°–Ø - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É <a href="${groupLink}">BotOpenAi</a>üí°üí°üí°`;
  await ctx.replyWithHTML(message, Markup.inlineKeyboard([
    Markup.button.url('üí°üí°–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—Éüí°üí°', groupLink)
  ]));
});

const TIMEOUT_DURATION = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

bot.on('voice', async (ctx) => {
  const userId = String(ctx.message.from.id);
  console.log('User ID:', userId); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
  const groupMember = await ctx.telegram.getChatMember(GROUP_ID, userId);
  console.log('Group Member:', groupMember); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
  if (groupMember && groupMember.status === 'member') {
    try {
      await ctx.reply(code('‚åõ–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...‚åõ‚åõ‚åõ'));
      ctx.session ??= INITIAL_SESSION;
      const link = await ctx.telegram.getFileLink(ctx.message.voice.file_id);
      const oggPath = await ogg.create(link.href, userId);
      const mp3Path = await ogg.toMp3(oggPath, userId);
      const text = await openai.transcription(mp3Path);
      await ctx.reply(code(`–í–∞—à –∑–∞–ø—Ä–æ—Å:‚úÖ ${text}`));
      ctx.session.messages.push({ role: openai.roles.USER, content: text });
      const responsePromise = openai.chat(ctx.session.messages);
      const timeoutPromise = delay(TIMEOUT_DURATION);
      const response = await Promise.race([responsePromise, timeoutPromise]);
      if (!response) {
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await ctx.reply('–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ');
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        process.kill(process.pid, 'SIGTERM');
        return;
      }
      ctx.session.messages.push({
        role: openai.roles.ASSISTANT,
        content: response.content,
      });
      await ctx.reply(response.content);
    } catch (e) {
      console.log('Error while voice message', e.message);
    }
  } else if (groupMember.status === 'creator') {
    try {
      await ctx.reply(code('‚åõ–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...‚åõ‚åõ‚åõ'));
      ctx.session ??= INITIAL_SESSION;
      const link = await ctx.telegram.getFileLink(ctx.message.voice.file_id);
      const oggPath = await ogg.create(link.href, userId);
      const mp3Path = await ogg.toMp3(oggPath, userId);
      const text = await openai.transcription(mp3Path);
      await ctx.reply(code(`–í–∞—à –∑–∞–ø—Ä–æ—Å:‚úÖ ${text}`));
      ctx.session.messages.push({ role: openai.roles.USER, content: text });
      const responsePromise = openai.chat(ctx.session.messages);
      const timeoutPromise = delay(TIMEOUT_DURATION);
      const response = await Promise.race([responsePromise, timeoutPromise]);
      if (!response) {
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await ctx.reply('–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ');
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        process.kill(process.pid, 'SIGTERM');
        return;
      }
      ctx.session.messages.push({
        role: openai.roles.ASSISTANT,
        content: response.content,
      });
      await ctx.reply(response.content);
    } catch (e) {
      console.log('Error while voice message', e.message);
    }
  } else {
    const message = `üí°üí°üí°–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É <a href="${groupLink}">BotOpenAi</a>üí°üí°üí°`;
    const keyboard = Markup.inlineKeyboard([
      Markup.button.url('üçÄüí°–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—Éüí°üçÄ', groupLink)
    ]);
    await ctx.replyWithHTML(message, keyboard);
  }
});

const GROUP_ID = '-1001761385833';
const groupLink = 'https://t.me/BotOpenAo';

bot.on(message('text'), async (ctx) => {
  const userId = String(ctx.message.from.id);
  console.log('User ID:', userId); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
  const groupMember = await ctx.telegram.getChatMember(GROUP_ID, userId);
  console.log('Group Member:', groupMember); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
  if (groupMember && groupMember.status === 'member') {
    try {
      await ctx.reply(code('‚åõ–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...'));
      ctx.session ??= INITIAL_SESSION;
      ctx.session.messages.push({ role: openai.roles.USER, content: ctx.message.text });
      const responsePromise = openai.chat(ctx.session.messages);
      const timeoutPromise = delay(TIMEOUT_DURATION);
      const response = await Promise.race([responsePromise, timeoutPromise]);
      if (!response) {
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await ctx.reply('–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ');
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        process.kill(process.pid, 'SIGTERM');
        return;
      }
      ctx.session.messages.push({
        role: openai.roles.ASSISTANT,
        content: response.content,
      });
      await ctx.reply(response.content);
    } catch (e) {
      console.log('Error while voice message', e.message);
    }
  } else if (groupMember.status === 'creator') {
    try {
      await ctx.reply(code('‚åõ–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...‚åõ‚åõ‚åõ'));
      ctx.session ??= INITIAL_SESSION;
      ctx.session.messages.push({ role: openai.roles.USER, content: ctx.message.text });
      const responsePromise = openai.chat(ctx.session.messages);
      const timeoutPromise = delay(TIMEOUT_DURATION);
      const response = await Promise.race([responsePromise, timeoutPromise]);
      if (!response) {
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await ctx.reply('–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ');
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        process.kill(process.pid, 'SIGTERM');
        return;
      }
      ctx.session.messages.push({
        role: openai.roles.ASSISTANT,
        content: response.content,
      });
      await ctx.reply(response.content);
    } catch (e) {
      console.log('Error while voice message', e.message);
    }
  } else {
    const message = `üí°üí°üí°–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É <a href="${groupLink}">BotOpenAi</a>üí°üí°üí°`;
    const keyboard = Markup.inlineKeyboard([
      Markup.button.url('üçÄüí°–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—Éüí°üçÄ', groupLink)
    ]);
    await ctx.replyWithHTML(message, keyboard);
  }
});

bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
